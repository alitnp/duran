import Layout from "components/Layout/Layout";
import Head from "next/head";
import { FaSortAmountDownAlt } from "react-icons/fa";
import ProductCardRow from "components/Global/ProductCard/ProductCard";
import ProductGrid from "components/Global/ProductGrid/ProductGrid";
import FilterVertical from "components/Results/FilterVertical";
import FilterHorizen from "components/Results/FilterHorizental";
import { useRouter } from "next/router";
import { useDispatch } from "react-redux";
import { useEffect } from "react";
import { getProductSearchResults } from "redux/middlewares/result/getProductSearchResults";
import { useSelector } from "react-redux";
import LoadingCover from "components/UI/LoadingSpin/LoadingCover";
import ResultsOrderBy from "components/Results/ResultsOrderBy";
import { AiOutlineCloseCircle } from "react-icons/ai";
import Link from "next/link";
import routes from "utils/constants/routes";
import ResultsPagination from "components/Results/Pagination";
import Item from "antd/lib/list/Item";

const Results = () => {
  //states
  const { loading, searchResults: shoes } = useSelector(
    (state) => state.result
  );

  //hooks
  const { query } = useRouter();
  const dispatch = useDispatch();

  //effects
  useEffect(() => {
    dispatch(getProductSearchResults(query));
  }, [query]);

  //functions
  const isFiltered = () => Object.values(query).some((item) => !!item);

  return (
    <>
      <Head>
        <title>Duran Shop</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <Layout>
        <div className="flex mt-6 mb-10 " style={{ minHeight: "80vh" }}>
          <FilterVertical />

          <div className="flex-grow-0 w-full mx-auto">
            <FilterHorizen />
            <div className="flex items-center justify-between w-full pb-2 mb-2 border-b sm:pb-0">
              <div className="flex flex-col sm:flex-row sm:items-center gap-x-2">
                <p className="mb-0">
                  {shoes?.PagingFilteringContext?.TotalItems} محصول
                </p>
                {isFiltered() && (
                  <Link href={routes.result.path} passHref>
                    <a className="flex items-center px-3 mb-0 text-xs bg-gray-200 rounded-full cursor-pointer hover:bg-gray-300 gap-x-1">
                      حذف فیلترها <AiOutlineCloseCircle />
                    </a>
                  </Link>
                )}
              </div>
              <ResultsOrderBy
                options={shoes?.PagingFilteringContext?.AvailableSortOptions}
              />
            </div>
            <ProductGrid>
              {shoes?.Products.map((item, index) => {
                return (
                  <div className="w-full " key={item.Id}>
                    <ProductCardRow key={index} info={item} />
                  </div>
                );
              })}
            </ProductGrid>
            {shoes && (
              <ResultsPagination info={shoes?.PagingFilteringContext} />
            )}
          </div>
        </div>
      </Layout>
      {loading && <LoadingCover />}
    </>
  );
};

export default Results;
